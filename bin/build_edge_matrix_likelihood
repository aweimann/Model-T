#! /usr/bin/env python
import os
import argparse
from traitarm.reconstruction.build_edge_matrix_likelihood import  build_edge_matrix_likelihood 
import pandas as pd

if __name__ == '__main__':
    import argparse 
    parser = argparse.ArgumentParser("reconstruct likelihood matrix from gainLoss output")
    parser.add_argument("tree", help='phylogenetic tree')
    parser.add_argument("phypat_pt_f", help='phylogenetic tree')
    parser.add_argument("--format", default = "newick", help='phylogenetic tree format')
    parser.add_argument("event_f", help='gainLoss tabular output file')
    parser.add_argument("--consider_loss_events", action = 'store_true',  help='only parse and reconstruct losses')
    parser.add_argument("--use_expected", action = "store_true", help = "--use expected number of events (default probabilities")
    parser.add_argument("feature_f", help = "list of features used")
    parser.add_argument("phenotype_f", help = "list of phenotypes")
    parser.add_argument("outdir", help = "output directory")
    a = parser.parse_args()
    #check if the directory already exists
    if os.path.exists(a.outdir):
        #sys.stderr.write("output directory %s already exists; delete and rerun\n"%a.outdir)
        #sys.exit(1)
        pass
    else:
        os.mkdir(a.outdir)
    #read pf and pt file
    pf_ids = pd.read_csv(a.feature_f, sep = "\t", index_col = 0).index.tolist()
    pt_ids = pd.read_csv(a.phenotype_f, sep = "\t", index_col = 0).index.astype('string').tolist()
    phy = pd.read_csv(a.phypat_pt_f, index_col = 0, sep = "\t")
    phy.index = phy.index.astype('string')
    bem = build_edge_matrix_likelihood(a.tree, a.format, phy, a.event_f, pf_ids, pt_ids, use_likelihood = not a.use_expected, use_gain_events = not a.consider_loss_events)
    bem.get_all_edge_m(pf_ids, pt_ids, a.outdir)
